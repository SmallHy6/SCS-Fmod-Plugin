; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; 错误代码:
; -1:存档目录获取失败
; -21:游戏目录获取失败
; -31:游戏Bank写入失败
; -41:游戏存档声音写入失败Config.cfg
; -42:游戏存档声音写入失败Local_Config.cfg
; -51:插件重复迁移失败
; -52:未找到需要迁移的插件目录
; -61:组件声音写入失败
; -100:安装残留清除失败
#define DefaultDir "D:\SteamLibrary\steamapps\common\Euro Truck Simulator 2"
#define FileName "[线上可用]TruckersMP声音导航_v1.51.0.1_v1.51.x"
#define MyAppName "SCS-Fmod-Plugin"
#define MyAppVersion "1.51.0.1"
#define MyAppPublisher "dariowouters&SmallHy"
#define MyAppURL "https://github.com/SmallHy6/SCS-Fmod-Plugin"
#define MyTextureDir "..\Texture"
#define MyOutDir "..\Releases"
#define MyPkgDir "..\Resources"
#define MySourceDir ".."
#define MyUninstDir "{app}\bin\win_x64\plugins\ts-fmod-plugin\Uninst".

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{EB59022F-93F0-40E4-8C82-413B4DB52BDF}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={#DefaultDir}
DefaultGroupName={#MyAppName}
ArchitecturesInstallIn64BitMode=x64os
DisableProgramGroupPage=yes
InfoBeforeFile={#MySourceDir}\License\License.txt
; Uncomment the following line to run in non administrative install mode (install for current user only.)
;PrivilegesRequired=lowest
OutputDir={#MyOutDir}
OutputBaseFilename={#FileName}
SetupIconFile={#MyTextureDir}\Logo\Tmp.ico
Compression=lzma
SolidCompression=yes
UninstallFilesDir={#MyUninstDir}
WizardStyle=modern
WizardImageFile={#MyTextureDir}\Logo\TmpLogo.bmp
UsePreviousAppDir=yes
DirExistsWarning=no

[Languages]
Name: "ChineseSimplified"; MessagesFile: "compiler:Languages\Euro Turck Simulator 2\ChineseSimplified.isl"
Name: "ChineseTraditional"; MessagesFile: "compiler:Languages\Euro Turck Simulator 2\ChineseTraditional.isl"
Name: "English"; MessagesFile: "compiler:Languages\Euro Turck Simulator 2\English.isl"

[Messages]
SelectDirDesc= 
SelectDirLabel3=请选择_Steam游戏库_主目录[必须包含Euro Truck Simulator 2 文件夹]
SelectDirBrowseLabel=例如:_SteamLibrary\steamapps\common\

[Components]
Name: Main; Description:"主程序(必选)";Types:full compact custom;Flags: fixed
Name: Option; Description:"→卡车引擎声音←";Types:compact custom;Flags: fixed;
Name: Option; Description:"无";Types:compact custom;Flags: exclusive;
Name: HySuperV8; Description:"小虎牙V8引擎声音(可选)";Flags: exclusive;
Name: DafEngine; Description:"达夫(Daf)引擎声音(可选)";Flags: exclusive;
Name: RenaultEngine; Description:"雷诺(Renault)引擎声音(可选)";Flags: exclusive;
Name: Scania_DC12; Description:"斯堪尼亚(Scania)_DC12引擎声音(可选)";Flags: exclusive;
Name: Scania_DC124; Description:"斯堪尼亚(Scania)_DC124引擎声音(可选)";Flags: exclusive;
Name: Scania_v8; Description:"斯堪尼亚(Scania)_v8引擎声音(可选)";Flags: exclusive;
Name: Volvo_Vnl; Description:"沃尔沃(Volvo)引擎声音(可选)";Flags: exclusive
Name: Option; Description:"→卡车内部声音←";Types:compact custom;Flags: fixed;
Name: Option; Description:"无";Types:compact custom;Flags: exclusive;
Name: HyInteralSound; Description:"小虎牙内部声音(可选)";Flags: exclusive;
Name: Option; Description:"→卡车语音导航←";Types:compact custom;Flags: fixed;
Name: Option; Description:"无";Types:compact custom;Flags: exclusive;
Name: Option; Description:"→地方方言←";Flags: exclusive;
Name: DongbeiMM; Description:"导航东北美眉(可选)";Flags: exclusive;
Name: Option; Description:"→视频人物←";Flags: exclusive;
Name: Tianmilaozhang; Description:"导航甜蜜老张(可选)";Flags: exclusive;
Name: Option; Description:"→电影人物←";Flags: exclusive;
Name: Chenshuting; Description:"导航陈舒婷(可选)";Flags: exclusive;
Name: Guodegang; Description:"导航郭德纲(可选)";Flags: exclusive;
Name: Luoyonghao; Description:"导航罗永浩(可选)";Flags: exclusive;
Name: Shenteng; Description:"导航沈腾(可选)";Flags: exclusive;
Name: Suisui; Description:"导航穗穗(可选)";Flags: exclusive;
Name: Xujiang; Description:"导航徐江(可选)";Flags: exclusive;
Name: Yuqian; Description:"导航于谦(可选)";Flags: exclusive;
Name: Option; Description:"→火爆歌手←";Flags: exclusive;
Name: LeZhengLing; Description:"导航乐正凌(可选)";Flags: exclusive;
Name: Wuren; Description:"导航五人(可选)";Flags: exclusive;
Name: Xiangwan; Description:"导航向晚(可选)";Flags: exclusive;
Name: Option; Description:"→声甜萌妹←";Flags: exclusive;
Name: Bingtang; Description:"导航冰糖(可选)";Flags: exclusive;
Name: Luotianyi; Description:"导航洛天依(可选)";Flags: exclusive
Name: Linzhiling; Description:"导航林志玲(可选)";Flags: exclusive
Name: Linzhiling_v2; Description:"导航林志玲v2(可选)";Flags: exclusive
Name: Shantu; Description:"导航山兔(可选)";Flags: exclusive;
Name: ShaonianPi; Description:"导航少年Pi(可选)";Flags: exclusive;
Name: Xiaotuantuan; Description:"导航小团团(可选)";Flags: exclusive
Name: Option; Description:"→原神←";Flags: exclusive;
Name: Keli; Description:"导航可莉(可选)";Flags: exclusive;
Name: Moli; Description:"导航茉莉(可选)";Flags: exclusive;
Name: Paimeng; Description:"导航派蒙(可选)";Flags: exclusive;
Name: Qin; Description:"导航・琴(可选)";Flags: exclusive; 

[Files]
Source: "{#MyPkgDir}\Bin\*"; DestDir: "{app}\bin"; Components:Main; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\HySuperV8\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:HySuperV8; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\HyInteralSound\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:HyInteralSound; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\Default\Daf\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:DafEngine; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\Default\Renault\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:RenaultEngine; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\Default\Scania_DC12\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Scania_DC12; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\Default\Scania_DC124\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Scania_DC124; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\Default\Scania_v8\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Scania_v8; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Engine\Default\Volvo_Vnl\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Volvo_Vnl; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Bingtang\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Bingtang; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Chenshuting\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Chenshuting; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\DongbeiMM\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:DongBeiMM; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Guodegang\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Guodegang; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Keli\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Keli; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Lezhengling\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Lezhengling; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Linzhiling\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Linzhiling; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Linzhiling_v2\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Linzhiling_v2; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Luotianyi\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Luotianyi; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Luoyonghao\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Luoyonghao; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Moli\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Moli; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Paimeng\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Paimeng; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Qin\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Qin; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Shantu\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Shantu; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\ShaonianPi\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:ShaonianPi; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Shenteng\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Shenteng; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Suisui\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Suisui; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Tianmilaozhang\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Tianmilaozhang; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Wuren\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Wuren; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Xiangwan\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Xiangwan; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Xiaotuantuan\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Xiaotuantuan; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Xujiang\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Xujiang; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MyPkgDir}\Nav\Yuqian\*"; DestDir: "{app}\bin\win_x64\plugins\ts-fmod-plugin"; Components:Yuqian; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "{#MySourceDir}\Media\BG\BackgroundMusic.mp3"; Flags: nocompression dontcopy
Source: "{#MySourceDir}\Batch\*"; Flags: nocompression dontcopy
Source: "{#MySourceDir}\Texture\Audio\*"; Flags: nocompression dontcopy
Source: compiler:Plugin\*; Flags: dontcopy noencryption
Source: compiler:psvince.dll; Flags: dontcopy noencryption
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"

[Code]
//...............................................................//
//                            _ooOoo_                            //
//                           o8888888o                           //
//                           88" . "88                           //
//                           (| -_- |)                           //
//                            O\ = /O                            //
//                        ____/`---'\____                        //
//                      .   ' \\| |// `.                         //
//                       / \\||| 8 |||// \                       //
//                     / _||||| -8- |||||- \                     //
//                       | | \\\ 8 /// | |                       //
//                     | \_| ''\-8-/'' | |                       //
//                      \ .-\__ `8` ___/-. /                     //
//                   ___`. .' /--8--\ `. . __                    //
//                ."" '< `.___\_<8>_/___.' >'"".                 //
//               | | : `- \`.;`\ 8 /`;.`/ - ` : | |              //
//                 \ \ `-. \_ __\ /__ _/ .-` / /                 //
//         ======`-.____`-.___\_____/___.-`____.-'======         //
//                            `=---='                            //
//                                                               //
//...............................................................//
//导入函数

//变量定义
var
  //全局变量
  MovePlugins: Boolean;
  //自定义界面
  ChooseVolumePage: TWizardPage;
  //自定义页面组件
    //选择音量页面
    CVPVolumeText: TLabel;
    CVPVolume: TEdit;
    CVPEngineText: TLabel;
    CVPEngine: TEdit;
    CVPExhaustText: TLabel;
    CVPExhaust: TEdit;
    CVPTurboText: TLabel;
    CVPTurbo: TEdit;
    CVPInteriorText: TLabel;
    CVPInterior: TEdit;
    CVPNavText: TLabel;
    CVPNav: TEdit;
    CVPExteriorText: TLabel;
    CVPExterior: TEdit;
//自定义变量
type
  TDirectShowEventProc = procedure(EventCode, Param1, Param2: Integer);
  
//常数定义
const
  EC_COMPLETE = $01;
  
//前置接口

procedure OnEmbeddedMediaPlayerEvent(EventCode, Param1, Param2: Integer); 
begin
  if EventCode = EC_COMPLETE then
    Exit;
end;
procedure ExitInstall(exitCode:integer);
  external 'ExitProcess@kernel32.dll stdcall';
//函数块[1]:音乐播放器
function DSInitializeAudioFile(FileName: WideString; CallbackProc: TDirectShowEventProc): Boolean; 
  external 'DSInitializeAudioFile@files:mediaplayer.dll stdcall';
function DSPlayMediaFile: Boolean;
  external 'DSPlayMediaFile@files:mediaplayer.dll stdcall';
function DSStopMediaPlay: Boolean;
  external 'DSStopMediaPlay@files:mediaplayer.dll stdcall';
function DSSetVolume(Value: LongInt): Boolean;
  external 'DSSetVolume@files:mediaplayer.dll stdcall';
function DSGetLastError(var ErrorText: WideString): HRESULT;
  external 'DSGetLastError@files:mediaplayer.dll stdcall';
//函数块[2]:获取游戏目录
function SearthGamePath(RootKey: Integer; SubKeyName, ValueName: String; var OutInstallPath: String): Boolean;
var
InstallPath: String;
begin
  if RegValueExists(RootKey, SubKeyName, ValueName) then
  begin
    if RegQueryStringValue(RootKey, SubKeyName, ValueName, InstallPath) then
    begin
      OutInstallPath:= InstallPath;
      Result:= True;
      Exit;
    end
    else
    begin
      Result:= False;
      MsgBox('无法访问', mbError, MB_OK);
      Exit;
    end;
  end
  else
  begin
    Result:= False;
  end;
end;
//函数块[3]:检查目录
function CheakDir(InstallPath:String): Boolean; 
var 
   ExePath: String; 
begin 
  ExePath := InstallPath;
  if not FileExists(ExePath) then 
  begin 
    Result := False;
  end
  else
  begin
    Result := True;
  end;
end;
//函数块[4]:插件迁移
function PluginsMove(OldPluginsPath, NewPluginsPath, Ext, Exc1, Exc2: String): Boolean;
var
  MovePlugin: TFindRec;
  FilePathAfter, FilePathBefore: String;
begin
  if FindFirst(OldPluginsPath + Ext, MovePlugin) then
  begin
    try
    repeat
    FilePathAfter:= OldPluginsPath + MovePlugin.Name;
    FilePathBefore:= NewPluginsPath + MovePlugin.Name;
    if Pos(Exc1, FilePathAfter) or Pos(Exc2, FilePathAfter) > 0 then
    begin
      FindNext(MovePlugin);
    end;
    if not FileCopy(FilePathAfter, FilePathBefore, False) then
    begin
      Result:= False;
      MsgBox('错误:-51,请以管理员模式启动!', mbCriticalError, MB_OK);
      ExitInstall(0);
    end;
    until not FindNext(MovePlugin);
    Result:= True;
    finally
      FindClose(MovePlugin);
    end;
  end;
end;
//函数块[6]:GUI初始化
function InitCVPGUI(Page:TWizardPage; var Name: TEdit; TextName: TLabel; Left, Top, Height, Width:Integer; Caption: String): Boolean;
begin
  Result:= False;
  TextName:= TLabel.Create(Page);  
  TextName.Parent := Page.Surface;  
  TextName.Left := ScaleX(Left);  
  TextName.Top := ScaleY(Top);  
  TextName.Width := ScaleX(Width);  
  TextName.Height := ScaleY(Height);  
  TextName.Font.Name := '黑体';
  TextName.Font.Size := 9;
  TextName.Caption := Caption;
  Name:= TEdit.Create(Page);
  Name.Parent := Page.Surface;  
  Name.Left := TextName.Left + TextName.Width + ScaleX(10);  
  Name.Top := TextName.Top - Height div 2
  Name.Width := ScaleX(Width);  
  Name.Text := '50';
  Result:= True;
end;
//函数块[7]:字符串转浮点数
function StrToFloat(InputStr: String): String;
var
  StrInteger:Integer;
begin
  StrInteger:= StrToInt(InputStr);
  if (StrInteger <= 100) and (StrInteger >= 0) then
  begin
    if StrInteger = 100 then
    begin
      Result:= '1.00';
    end
    else if StrInteger = 0 then
    begin
      Result:= '0.00'
    end
    else
    begin
      Result:= '0.' + IntToStr(StrInteger);
    end;
  end;
end;
//函数块[8]:数据库
function FindString(SearthString: String): String;
begin
  if SearthString = '小虎牙V8卡车引擎(可选)' then
  begin
    Result := 'HySuperV8';
    Exit;
  end;
  if SearthString = '达夫(Daf)引擎声音(可选)' then
  begin
    Result := 'Daf';
    Exit;
  end;
  if SearthString = '雷诺(Renault)引擎声音(可选)' then
  begin
    Result := 'Renault';
    Exit;
  end;
  if SearthString = '斯堪尼亚(Scania)_DC12引擎声音(可选)' then
  begin
    Result := 'Scania_DC12';
    Exit;
  end;
  if SearthString = '斯堪尼亚(Scania)_DC124引擎声音(可选)' then
  begin
    Result := 'Scania_DC124';
    Exit;
  end;
  if SearthString = '斯堪尼亚(Scania)_v8引擎声音(可选)' then
  begin
    Result := 'Scania_v8';
    Exit;
  end;
  if SearthString = '沃尔沃(Volvo)引擎声音(可选)' then
  begin
    Result := 'Volvo_vnl';
    Exit;
  end;
  if SearthString = '小虎牙内部声音(可选)' then
  begin
    Result := 'HyInteralSound';
    Exit;
  end;
  if SearthString = '导航东北美眉(可选)' then
  begin
    Result := 'DongbeiMM';
    Exit;
  end;
  if SearthString = '导航甜蜜老张(可选)' then
  begin
    Result := 'Tianmilaozhang';
    Exit;
  end;
  if SearthString = '导航陈舒婷(可选)' then
  begin
    Result := 'Chenshuting';
    Exit;
  end;
  if SearthString = '导航郭德纲(可选)' then
  begin
    Result := 'Guodegang';
    Exit;
  end;
  if SearthString = '导航罗永浩(可选)' then
  begin
    Result := 'Luoyonghao';
    Exit;
  end;
  if SearthString = '导航沈腾(可选)' then
  begin
    Result := 'Shenteng';
    Exit;
  end;
  if SearthString = '导航穗穗(可选)' then
  begin
    Result := 'Suisui';
    Exit;
  end;
  if SearthString = '导航徐江(可选)' then
  begin
    Result := 'Xujiang';
    Exit;
  end;
  if SearthString = '导航于谦(可选)' then
  begin
    Result := 'Yuqian';
    Exit;
  end;
  if SearthString = '导航乐正凌(可选)' then
  begin
    Result := 'LeZhengLing';
    Exit;
  end;
  if SearthString = '导航五人(可选)' then
  begin
    Result := 'Wuren';
    Exit;
  end;
  if SearthString = '导航向晚(可选)' then
  begin
    Result := 'Xiangwan';
    Exit;
  end;
  if SearthString = '导航冰糖(可选)' then
  begin
    Result := 'Bingtang';
    Exit;
  end;
  if SearthString = '导航洛天依(可选)' then
  begin
    Result := 'Luotianyi';
    Exit;
  end;
  if SearthString = '导航林志玲(可选)' then
  begin
    Result := 'Linzhiling';
    Exit;
  end;
  if SearthString = '导航林志玲v2(可选)' then
  begin
    Result := 'Linzhiling_v2';
    Exit;
  end;
  if SearthString = '导航山兔(可选)' then
  begin
    Result := 'Shantu';
    Exit;
  end;
  if SearthString = '导航少年Pi(可选)' then
  begin
    Result := 'ShaonianPi';
    Exit;
  end;
  if SearthString = '导航小团团(可选)' then
  begin
    Result := 'Xiaotuantuan';
    Exit;
  end;
  if SearthString = '导航可莉(可选)' then
  begin
    Result := 'Keli';
    Exit;
  end;
  if SearthString = '导航茉莉(可选)' then
  begin
    Result := 'Moli';
    Exit;
  end; 
  if SearthString = '导航派蒙(可选)' then
  begin
    Result := 'Paimeng';
    Exit;
  end;
  if SearthString = '导航・琴(可选)' then
  begin
    Result := 'Qin';
    Exit;
  end
  else
  begin
    Result := 'None';
  end;
end;
//功能块[1,6]:播放背景音乐/获取游戏存档目录[1]
procedure InitializeWizard();
var
  //变量・播放背景音乐
  ErrorCode: HRESULT;
  ErrorText: WideString;
  MusicFilePath: String;
  //变量・获取游戏存档目录
  ExecCode: Integer;
begin
  //预解压需要的文件
  ExtractTemporaryFile('BackgroundMusic.mp3');
  ExtractTemporaryFile('PlaySound.png');
  ExtractTemporaryFile('ListProfiles.bat');
  //界面初始化
  ChooseVolumePage:= CreateCustomPage(WpInstalling, '调整组件音量', '');
  begin
    //调整组件音量
    InitCVPGUI(ChooseVolumePage, CVPVolume, CVPVolumeText, 20, 0, 10, 30, '全局音量(%):')
    InitCVPGUI(ChooseVolumePage, CVPEngine, CVPEngineText, 20, 40, 10, 30, '引擎音量(%):')
    InitCVPGUI(ChooseVolumePage, CVPExhaust, CVPExhaustText, 20, 80, 10, 30, '排气音量(%):')
    InitCVPGUI(ChooseVolumePage, CVPTurbo, CVPTurboText, 20, 120, 10, 30, '涡轮音量(%):')
    InitCVPGUI(ChooseVolumePage, CVPNav, CVPNavText, 20, 160, 10, 30, '导航音量(%):')
    InitCVPGUI(ChooseVolumePage, CVPInterior, CVPInteriorText, 20, 200, 10, 30, '内部音量(%):')
    InitCVPGUI(ChooseVolumePage, CVPExterior, CVPExteriorText, 20, 240, 10, 30, '外部音量(%):')
  end;
  //程序・播放背景音乐
  MusicFilePath:= ExpandConstant('{tmp}\BackgroundMusic.mp3');
  if FileExists(ExpandConstant('{tmp}\BackgroundMusic.mp3')) then
  begin
    if DSInitializeAudioFile(MusicFilePath, @OnEmbeddedMediaPlayerEvent) then
    begin
      DSSetVolume(-666);
      DSPlayMediaFile;
    end
    else
    begin
        ErrorCode := DSGetLastError(ErrorText);
        MsgBox('错误: ' + IntToStr(ErrorCode) + ErrorText, mbError, MB_OK);
      end;
    end;
  //程序・获取游戏存档目录
  begin
    Exec(ExpandConstant('{tmp}\ListProfiles.bat'), '', '', SW_SHOW, ewWaitUntilTerminated, ExecCode);
    if not FileExists(ExpandConstant('{localappdata}\Temp\Profiles.txt')) then 
    begin
      MsgBox('错误:-1,请以管理员模式启动!', mbCriticalError, MB_OK);
      Exit;
    end;
  end;
end;
//功能块[2,4,5,6,7]:获取游戏目录/检测插件重复/写入选择的Bank/写入组件音量/写入游戏声音[2]/
procedure CurPageChanged(CurPageID: Integer);
var 
  //变量・获取游戏目录
  ReceiveInstallPathBool: Boolean;
  ReceiveInstallPath: String;
  //变量检测插件重复
  MovePluginsRec1, MovePluginsRec2: Boolean;
  MovePluginPathAfter, MovePluginPathBefore: String;
  //变量・写入选择的Bank
  i, ii: Integer;
  ComponentName: String;    
  BankFilePath: String;  
  BankText: String;  
  StringFindReceive: String;
  BankTextArray: TStringList;
  //变量・写入组件音量
  CVPVolumeText: String;
  CVPVolumeFile: String;
  CVPVolumeNumArray, CVPVolumeArray, RealCVPVolumeArray: TStringList;
  //变量・写入游戏声音大小
  TempProfilesPath, ProfilesText: String;
  TempProfiles, RealProfilesPath1, RealProfilesPath2, RealProfiles1, RealProfiles2: TStringList;
begin
  //程序・获取游戏目录
  if CurPageID = wpSelectDir then
  begin
    ReceiveInstallPathBool:= SearthGamePath(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\Steam App 227300', 'InstallLocation', ReceiveInstallPath)
    if ReceiveInstallPathBool then
    begin
      if ReceiveInstallPath <> '' then
      begin
        WizardForm.DirEdit.Text:= ReceiveInstallPath;
      end;
    end
    else
    begin
      MsgBox('错误:-21,未找到游戏目录，请手动输入!', mbCriticalError, MB_OK);
      Exit;
    end;
  end;
  //程序・检测插件重复
  if CurpageID = wpInstalling then
  begin
    MovePlugins:= False;
    if FileExists(ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin-v2\selected.bank.txt')) then
    begin
      if MsgBox('检测到相同的声音插件,是否将该插件与本插件合并', MBError, MB_YESNO) = IDNO then
      begin
        if FileExists(ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin-v2.dll')) then
        begin
          if MsgBox('由于您选择了"否",将会导致本插件安装完成后无法正常运行,请选择"是"以合并插件,"否"则将会退出安装!', mbCriticalError, MB_YESNO) = IDNO then
          begin
            ExitInstall(0);
          end
          else
          begin
            MovePlugins:= True;
          end;
        end;
      end
      else
      begin
        MovePlugins:= True;
      end;
    end;
  end;
  if (CurpageID = ChooseVolumePage.ID) and (MovePlugins) then
  begin
    MovePluginPathAfter:=(AddBackslash(ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin-v2')));
    MovePluginPathBefore:=(AddBackslash(ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin')));
    MovePluginsRec1:=PluginsMove(MovePluginPathAfter, MovePluginPathBefore, '*.Bank', 'master', 'master.strings')
    MovePluginsRec2:=PluginsMove(MovePluginPathAfter, MovePluginPathBefore, '*.Guids', 'master', 'master.strings')
    if not MovePluginsRec1 and MovePluginsRec2 then
    begin
      MsgBox('错误:-62,请以管理员模式启动!', mbCriticalError, MB_OK);
      Exit;
    end;
    DeleteFile(ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin-v2.dll'));
    DelTree(ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin-v2'), True, True, True);
  end;
  //程序・写入选择的Bank
  if CurPageID = ChooseVolumePage.ID then
  begin
    BankFilePath := ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin\selected.bank.txt');  
    BankTextArray := TStringList.Create;  
    try  
    // 遍历所有组件  
    for i := 0 to WizardForm.ComponentsList.Items.Count - 1 do  
    begin
    // 检查组件是否被选中且不是Main或Option  
      if WizardForm.ComponentsList.Checked[i] then
      begin
        //获取选定组件Description
        ComponentName := WizardForm.ComponentsList.Items[i];
        //将ComponentName与数据库ID对比 
        begin
          StringFindReceive := FindString(ComponentName)
          if StringFindReceive <> 'None' then
          begin
            BankTextArray.add(StringFindReceive);
          end
          else
          begin
            Continue;
          end;
        end;
      end;
      // 如果已经选择了足够的组件，可以退出循环  
      if BankTextArray.Count >= 3 then  
        Break;  
    end;  
    //清空Bank选择内容
    BankText := '';
    //将选中的组件名称写入变量
    for i := 0 to BankTextArray.Count - 1 do  
    begin  
      BankText := BankText + BankTextArray[i] + #13#10;  
    end;  
    //写入文件  
    if not SaveStringToFile(BankFilePath, BankText, False) then  
    begin  
      MsgBox('错误:-31,请以管理员模式启动!', mbCriticalError, MB_OK);
    end;  
    finally  
      BankTextArray.Free;  // 释放StringList
    end;
  end;
  //程序・写入组件声音
  if CurPageID = wpFinished then
  begin
    ii:= 0;
    CVPVolumeText:= '';
    CVPVolumeFile:= ExpandConstant('{app}\bin\win_x64\plugins\ts-fmod-plugin\sound_levels.txt');
    CVPVolumeArray:= TStringList.Create;
    RealCVPVolumeArray:= TStringList.Create;
    RealCVPVolumeArray.LoadFromFile(CVPVolumeFile);
    CVPVolumeNumArray:= TStringList.Create;
    CVPVolumeNumArray.Add(StrToFloat(CVPVolume.Text));
    CVPVolumeNumArray.Add(StrToFloat(CVPEngine.Text));
    CVPVolumeNumArray.Add(StrToFloat(CVPExhaust.Text));
    CVPVolumeNumArray.Add(StrToFloat(CVPTurbo.Text));
    CVPVolumeNumArray.Add(StrToFloat(CVPNav.Text));
    CVPVolumeNumArray.Add(StrToFloat(CVPInterior.Text));
    CVPVolumeNumArray.Add(StrToFloat(CVPExterior.Text));
    CVPVolumeArray.Add(#32 + #32 + '"master":' + #32 + CVPVolumeNumArray[0] + ',');
    CVPVolumeArray.Add(#32 + #32 + '"engine":' + #32 + CVPVolumeNumArray[1] + ',');
    CVPVolumeArray.Add(#32 + #32 + '"exhaust":' + #32 + CVPVolumeNumArray[2] + ',');
    CVPVolumeArray.Add(#32 + #32 + '"turbo":' + #32 + CVPVolumeNumArray[3] + ',');
    CVPVolumeArray.Add(#32 + #32 + '"navigation":' + #32 + CVPVolumeNumArray[4] + ',');
    CVPVolumeArray.Add(#32 + #32 + '"interior":' + #32 + CVPVolumeNumArray[5] + ',');
    CVPVolumeArray.Add(#32 + #32 + '"exterior_when_windows_closed":' + #32 + CVPVolumeNumArray[6] + ',');
    for i:= 1 to RealCVPVolumeArray.Count - 3 do
    begin
      RealCVPVolumeArray[i]:= CVPVolumeArray[ii];
      ii:= ii + 1;
    end;
    for i:= 0 to RealCVPVolumeArray.Count - 1 do
    begin
      CVPVolumeText:= CVPVolumeText + RealCVPVolumeArray[i] + #13#10;
      if not SaveStringToFile(CVPVolumeFile, CVPVolumeText, False) then
      begin
        MsgBox('错误:-61,请以管理员模式启动!', mbCriticalError, MB_OK);
        Break;
      end;
    end;
  end;
  //程序・写入游戏声音[2]
  if CurPageID = wpInstalling then
  begin
    try
    TempProfilesPath:= ExpandConstant('{localappdata}\Temp\Profiles.txt');
    TempProfiles:= TStringList.Create;
    RealProfilesPath1:= TStringList.Create;
    RealProfilesPath2:= TStringList.Create;
    RealProfiles1:= TStringList.Create;
    RealProfiles2:= TStringList.Create;
    TempProfiles.LoadFromFile(TempProfilesPath);
    for i:= 0 to TempProfiles.Count - 1 do
    begin
      RealProfilesPath1.Add(ExpandConstant('{userdocs}\Euro Truck Simulator 2\profiles\' + TempProfiles[i] + '\config.cfg'));
      RealProfilesPath2.Add(ExpandConstant('{userdocs}\Euro Truck Simulator 2\profiles\' + TempProfiles[i] + '\config_local.cfg'));
      RealProfiles1.LoadFromFile(RealProfilesPath1[i]);
      RealProfiles2.LoadFromFile(RealProfilesPath2[i]);
      ProfilesText:= '';
      for ii:= 0 to RealProfiles1.Count - 1 do
      begin
        if Pos('uset g_voice_navigation_pack', RealProfiles1[ii]) > 0 then
        begin
          RealProfiles1[ii]:= 'uset g_voice_navigation_pack "chinese_you"';
        end;
        if Pos('uset g_voice_navigation "0"', RealProfiles1[ii]) > 0 then
        begin
          RealProfiles1[ii]:= 'uset g_voice_navigation "1"';
        end;
        ProfilesText:= ProfilesText + RealProfiles1[ii] + #13#10;
      end;
      if not SaveStringToFile(RealProfilesPath1[i], ProfilesText, False) then
      begin
        MsgBox('错误:-41,请以管理员模式启动!', mbCriticalError, MB_OK);
      end;
      ProfilesText:= '';
      for ii:= 0 to RealProfiles2.Count - 1 do
      begin
        if Pos('uset s_navigation_volume', RealProfiles2[ii]) > 0 then
        RealProfiles2[ii]:= 'uset s_navigation_volume "0"';
        ProfilesText:= ProfilesText + RealProfiles2[ii] + #13#10;
      end;
      if not SaveStringToFile(RealProfilesPath2[i], ProfilesText, False) then
      begin
        MsgBox('错误:-42,请以管理员模式启动!', mbCriticalError, MB_OK);
      end;
      //写入Profiles声音
    end;
    finally
      TempProfiles.Free;
      RealProfilesPath1.Free;
      RealProfilesPath2.Free;
      RealProfiles1.Free;
      RealProfiles2.Free;
    end;
  end;
end;
//功能块[3]:检查游戏文件夹
function NextButtonClick(CurPageID: Integer): Boolean;
var
CheakDirReceive: Boolean;
InstallPath:String;
begin
  Result:= True;
  if CurPageID = wpSelectDir then 
  begin 
    InstallPath := WizardDirValue + '\bin\win_x64\eurotrucks2.exe';
    CheakDirReceive := CheakDir(InstallPath)
    if not CheakDirReceive then
    begin  
      MsgBox('请选择带有Euro Truck Simulator 2的Common文件夹', mbError, MB_OK); 
      Result:= False
    end
    else
    begin
      Exit;
    end;
  end;
end;
//功能块[8]:清除安装残留
procedure CurStepChanged(CurStep: TSetupStep);
var
  RegText: String;
begin
  if CurStep = ssDone then
  begin
    //清除文件残留
    DeleteFile(ExpandConstant('{localappdata}\Temp\Profiles.txt'));
    //清除注册表残留
    RegText:= '';
    if RegWriteStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{EB59022F-93F0-40E4-8C82-413B4DB52BDF}_is1', 'Inno Setup: Deselected Components', RegText) then
    begin
      if not RegWriteStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{EB59022F-93F0-40E4-8C82-413B4DB52BDF}_is1', 'Inno Setup: Selected Components', RegText) then
      begin
        MsgBox('错误:-100! 请以管理员模式启动!', mbCriticalError, MB_OK);
      end;
    end;  
  end;
end;
//功能块[9]:结束播放音乐
procedure DeinitializeSetup;
begin
  DSStopMediaPlay;
end;